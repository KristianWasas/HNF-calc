-----------------------
Here the MxM function is altered, such that since Ui is an 
identity matrix with a 2x2 cel inserted somewere. We can use this to turn 
our MxM to only interact with the two rows that the cell is located on. 
This turn our MxM from O(n^3) to O(n)
-----------------------
//Create the simple matrix Ui to act upon M_i
int** Ui = (int**)malloc(sizeof(int*)*rows);
for(int i=0; i<rows; i++){
    Ui[i] = (int*)malloc(sizeof(int)*rows);
    for(int j=0; j<rows; j++){
        Ui[i][j] = 0;
    }
    Ui[i][i] = 1;
}
for(int j=0; j<colums; j++){
    for(int i=rows-1; i>j; i--){
        //Reset ui to identity matrix
        if(i != rows-1){
            Ui[i][i] = 1;
            Ui[i+1][i] = 0;
            Ui[i][i+1] = 0;
            Ui[i+1][i+1] = 1;
        }else if(j != 0){
            Ui[j-1][j-1] = 1;
            Ui[j-1][j] = 0;
            Ui[j][j-1] = 0;
            Ui[j][j] = 1; 
        }
    
        //First handle the cases were one of the elements is 0, since then its just a premutation matrix
        //And doing Diophantes equation/ qcd is kinda undefined behaviour with 0
        //Nothing, since the element we are trying to change to 0 is already 0
        if(H[i][j] == 0){
        //The case that Ui would jsut be a permutation matrix of rows j and j-1
        }else if(H[i-1][j] == 0){
            Ui[i][i] = 0;
            Ui[i-1][i] = 1;
            Ui[i][i-1] = 1;
            Ui[i-1][i-1] = 0;
        //And the base case as in the lecture notes
        }else{
            //Calculate values to go into Ui
            int a = H[i-1][j];
            int b = H[i][j];
            int g = std::__gcd(a, b);
            int* xy = DioSolv(a, b, g); 
            int alpha = a/g;
            int beta  = b/g;

            //Update Ui
            Ui[i][i] = alpha;
            Ui[i][i-1] = -beta;
            Ui[i-1][i] = xy[1];
            Ui[i-1][i-1] = xy[0];

            free(xy);
        }

        //Calculate new H and U for tracking, note that H and U are replaced with new values
        MxM(Ui, rows, rows, H, rows, colums, i);
        MxM(Ui, rows, rows, U, rows, rows, i);
    }
}
for(int i=0; i<rows; i++){
    free(Ui[i]);
}
free(Ui);